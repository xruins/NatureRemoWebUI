// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPost1DevicesDeviceTemperatureOffsetParams creates a new Post1DevicesDeviceTemperatureOffsetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPost1DevicesDeviceTemperatureOffsetParams() *Post1DevicesDeviceTemperatureOffsetParams {
	return &Post1DevicesDeviceTemperatureOffsetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPost1DevicesDeviceTemperatureOffsetParamsWithTimeout creates a new Post1DevicesDeviceTemperatureOffsetParams object
// with the ability to set a timeout on a request.
func NewPost1DevicesDeviceTemperatureOffsetParamsWithTimeout(timeout time.Duration) *Post1DevicesDeviceTemperatureOffsetParams {
	return &Post1DevicesDeviceTemperatureOffsetParams{
		timeout: timeout,
	}
}

// NewPost1DevicesDeviceTemperatureOffsetParamsWithContext creates a new Post1DevicesDeviceTemperatureOffsetParams object
// with the ability to set a context for a request.
func NewPost1DevicesDeviceTemperatureOffsetParamsWithContext(ctx context.Context) *Post1DevicesDeviceTemperatureOffsetParams {
	return &Post1DevicesDeviceTemperatureOffsetParams{
		Context: ctx,
	}
}

// NewPost1DevicesDeviceTemperatureOffsetParamsWithHTTPClient creates a new Post1DevicesDeviceTemperatureOffsetParams object
// with the ability to set a custom HTTPClient for a request.
func NewPost1DevicesDeviceTemperatureOffsetParamsWithHTTPClient(client *http.Client) *Post1DevicesDeviceTemperatureOffsetParams {
	return &Post1DevicesDeviceTemperatureOffsetParams{
		HTTPClient: client,
	}
}

/* Post1DevicesDeviceTemperatureOffsetParams contains all the parameters to send to the API endpoint
   for the post1 devices device temperature offset operation.

   Typically these are written to a http.Request.
*/
type Post1DevicesDeviceTemperatureOffsetParams struct {

	/* Device.

	   Device ID.
	*/
	Device string

	/* Offset.

	   Temperature offset value added to the measured temperature.
	*/
	Offset int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post1 devices device temperature offset params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Post1DevicesDeviceTemperatureOffsetParams) WithDefaults() *Post1DevicesDeviceTemperatureOffsetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post1 devices device temperature offset params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Post1DevicesDeviceTemperatureOffsetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) WithTimeout(timeout time.Duration) *Post1DevicesDeviceTemperatureOffsetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) WithContext(ctx context.Context) *Post1DevicesDeviceTemperatureOffsetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) WithHTTPClient(client *http.Client) *Post1DevicesDeviceTemperatureOffsetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) WithDevice(device string) *Post1DevicesDeviceTemperatureOffsetParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) SetDevice(device string) {
	o.Device = device
}

// WithOffset adds the offset to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) WithOffset(offset int64) *Post1DevicesDeviceTemperatureOffsetParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the post1 devices device temperature offset params
func (o *Post1DevicesDeviceTemperatureOffsetParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *Post1DevicesDeviceTemperatureOffsetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device
	if err := r.SetPathParam("device", o.Device); err != nil {
		return err
	}

	// form param offset
	frOffset := o.Offset
	fOffset := swag.FormatInt64(frOffset)
	if fOffset != "" {
		if err := r.SetFormParam("offset", fOffset); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
