// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ACButton Specify "power-off" always if you want the air conditioner powered off. Empty means powered on.
//
// swagger:model ACButton
type ACButton string

func NewACButton(value ACButton) *ACButton {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ACButton.
func (m ACButton) Pointer() *ACButton {
	return &m
}

const (

	// ACButtonEmpty captures enum value ""
	ACButtonEmpty ACButton = ""

	// ACButtonPowerDashOff captures enum value "power-off"
	ACButtonPowerDashOff ACButton = "power-off"
)

// for schema
var aCButtonEnum []interface{}

func init() {
	var res []ACButton
	if err := json.Unmarshal([]byte(`["","power-off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aCButtonEnum = append(aCButtonEnum, v)
	}
}

func (m ACButton) validateACButtonEnum(path, location string, value ACButton) error {
	if err := validate.EnumCase(path, location, value, aCButtonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this a c button
func (m ACButton) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateACButtonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this a c button based on context it is used
func (m ACButton) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
