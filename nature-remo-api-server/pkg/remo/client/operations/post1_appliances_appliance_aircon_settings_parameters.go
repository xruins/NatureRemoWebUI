// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPost1AppliancesApplianceAirconSettingsParams creates a new Post1AppliancesApplianceAirconSettingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPost1AppliancesApplianceAirconSettingsParams() *Post1AppliancesApplianceAirconSettingsParams {
	return &Post1AppliancesApplianceAirconSettingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPost1AppliancesApplianceAirconSettingsParamsWithTimeout creates a new Post1AppliancesApplianceAirconSettingsParams object
// with the ability to set a timeout on a request.
func NewPost1AppliancesApplianceAirconSettingsParamsWithTimeout(timeout time.Duration) *Post1AppliancesApplianceAirconSettingsParams {
	return &Post1AppliancesApplianceAirconSettingsParams{
		timeout: timeout,
	}
}

// NewPost1AppliancesApplianceAirconSettingsParamsWithContext creates a new Post1AppliancesApplianceAirconSettingsParams object
// with the ability to set a context for a request.
func NewPost1AppliancesApplianceAirconSettingsParamsWithContext(ctx context.Context) *Post1AppliancesApplianceAirconSettingsParams {
	return &Post1AppliancesApplianceAirconSettingsParams{
		Context: ctx,
	}
}

// NewPost1AppliancesApplianceAirconSettingsParamsWithHTTPClient creates a new Post1AppliancesApplianceAirconSettingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPost1AppliancesApplianceAirconSettingsParamsWithHTTPClient(client *http.Client) *Post1AppliancesApplianceAirconSettingsParams {
	return &Post1AppliancesApplianceAirconSettingsParams{
		HTTPClient: client,
	}
}

/* Post1AppliancesApplianceAirconSettingsParams contains all the parameters to send to the API endpoint
   for the post1 appliances appliance aircon settings operation.

   Typically these are written to a http.Request.
*/
type Post1AppliancesApplianceAirconSettingsParams struct {

	/* AirDirection.

	   AC air direction
	*/
	AirDirection *string

	/* AirVolume.

	   AC air volume
	*/
	AirVolume *string

	/* Appliance.

	   Appliance ID.
	*/
	Appliance string

	/* Button.

	   Button
	*/
	Button *string

	/* OperationMode.

	   AC operation mode
	*/
	OperationMode *string

	/* Temperature.

	   Temperature
	*/
	Temperature *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post1 appliances appliance aircon settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Post1AppliancesApplianceAirconSettingsParams) WithDefaults() *Post1AppliancesApplianceAirconSettingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post1 appliances appliance aircon settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Post1AppliancesApplianceAirconSettingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithTimeout(timeout time.Duration) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithContext(ctx context.Context) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithHTTPClient(client *http.Client) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAirDirection adds the airDirection to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithAirDirection(airDirection *string) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetAirDirection(airDirection)
	return o
}

// SetAirDirection adds the airDirection to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetAirDirection(airDirection *string) {
	o.AirDirection = airDirection
}

// WithAirVolume adds the airVolume to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithAirVolume(airVolume *string) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetAirVolume(airVolume)
	return o
}

// SetAirVolume adds the airVolume to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetAirVolume(airVolume *string) {
	o.AirVolume = airVolume
}

// WithAppliance adds the appliance to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithAppliance(appliance string) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetAppliance(appliance)
	return o
}

// SetAppliance adds the appliance to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetAppliance(appliance string) {
	o.Appliance = appliance
}

// WithButton adds the button to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithButton(button *string) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetButton(button)
	return o
}

// SetButton adds the button to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetButton(button *string) {
	o.Button = button
}

// WithOperationMode adds the operationMode to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithOperationMode(operationMode *string) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetOperationMode(operationMode)
	return o
}

// SetOperationMode adds the operationMode to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetOperationMode(operationMode *string) {
	o.OperationMode = operationMode
}

// WithTemperature adds the temperature to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) WithTemperature(temperature *string) *Post1AppliancesApplianceAirconSettingsParams {
	o.SetTemperature(temperature)
	return o
}

// SetTemperature adds the temperature to the post1 appliances appliance aircon settings params
func (o *Post1AppliancesApplianceAirconSettingsParams) SetTemperature(temperature *string) {
	o.Temperature = temperature
}

// WriteToRequest writes these params to a swagger request
func (o *Post1AppliancesApplianceAirconSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AirDirection != nil {

		// form param air_direction
		var frAirDirection string
		if o.AirDirection != nil {
			frAirDirection = *o.AirDirection
		}
		fAirDirection := frAirDirection
		if fAirDirection != "" {
			if err := r.SetFormParam("air_direction", fAirDirection); err != nil {
				return err
			}
		}
	}

	if o.AirVolume != nil {

		// form param air_volume
		var frAirVolume string
		if o.AirVolume != nil {
			frAirVolume = *o.AirVolume
		}
		fAirVolume := frAirVolume
		if fAirVolume != "" {
			if err := r.SetFormParam("air_volume", fAirVolume); err != nil {
				return err
			}
		}
	}

	// path param appliance
	if err := r.SetPathParam("appliance", o.Appliance); err != nil {
		return err
	}

	if o.Button != nil {

		// form param button
		var frButton string
		if o.Button != nil {
			frButton = *o.Button
		}
		fButton := frButton
		if fButton != "" {
			if err := r.SetFormParam("button", fButton); err != nil {
				return err
			}
		}
	}

	if o.OperationMode != nil {

		// form param operation_mode
		var frOperationMode string
		if o.OperationMode != nil {
			frOperationMode = *o.OperationMode
		}
		fOperationMode := frOperationMode
		if fOperationMode != "" {
			if err := r.SetFormParam("operation_mode", fOperationMode); err != nil {
				return err
			}
		}
	}

	if o.Temperature != nil {

		// form param temperature
		var frTemperature string
		if o.Temperature != nil {
			frTemperature = *o.Temperature
		}
		fTemperature := frTemperature
		if fTemperature != "" {
			if err := r.SetFormParam("temperature", fTemperature); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
