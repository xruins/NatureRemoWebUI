// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LIGHTState l i g h t state
//
// swagger:model LIGHTState
type LIGHTState struct {

	// brightness
	Brightness string `json:"brightness,omitempty"`

	// last button
	LastButton string `json:"last_button,omitempty"`

	// power
	// Enum: [on off]
	Power string `json:"power,omitempty"`
}

// Validate validates this l i g h t state
func (m *LIGHTState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lIGHTStateTypePowerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lIGHTStateTypePowerPropEnum = append(lIGHTStateTypePowerPropEnum, v)
	}
}

const (

	// LIGHTStatePowerOn captures enum value "on"
	LIGHTStatePowerOn string = "on"

	// LIGHTStatePowerOff captures enum value "off"
	LIGHTStatePowerOff string = "off"
)

// prop value enum
func (m *LIGHTState) validatePowerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lIGHTStateTypePowerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LIGHTState) validatePower(formats strfmt.Registry) error {
	if swag.IsZero(m.Power) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerEnum("power", "body", m.Power); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this l i g h t state based on context it is used
func (m *LIGHTState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LIGHTState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LIGHTState) UnmarshalBinary(b []byte) error {
	var res LIGHTState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
