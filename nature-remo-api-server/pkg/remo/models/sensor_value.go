// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SensorValue The reference key to SensorValue means "te" = temperature, "hu" = humidity, "il" = illumination, "mo" = movement.
// The val of "mo" is always 1 and when movement event is captured created_at is updated.
//
//
// swagger:model SensorValue
type SensorValue struct {

	// created at
	// Format: date-time
	CreatedAt DateTime `json:"created_at,omitempty"`

	// val
	Val float32 `json:"val,omitempty"`
}

// Validate validates this sensor value
func (m *SensorValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorValue) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := m.CreatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("created_at")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sensor value based on the context it is used
func (m *SensorValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorValue) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("created_at")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorValue) UnmarshalBinary(b []byte) error {
	var res SensorValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
