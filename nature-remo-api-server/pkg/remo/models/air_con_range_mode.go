// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AirConRangeMode air con range mode
//
// swagger:model AirConRangeMode
type AirConRangeMode struct {

	// dir
	Dir []AirDirection `json:"dir"`

	// temp
	Temp []Temperature `json:"temp"`

	// vol
	Vol []AirVolume `json:"vol"`
}

// Validate validates this air con range mode
func (m *AirConRangeMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirConRangeMode) validateDir(formats strfmt.Registry) error {
	if swag.IsZero(m.Dir) { // not required
		return nil
	}

	for i := 0; i < len(m.Dir); i++ {

		if err := m.Dir[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dir" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dir" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AirConRangeMode) validateTemp(formats strfmt.Registry) error {
	if swag.IsZero(m.Temp) { // not required
		return nil
	}

	for i := 0; i < len(m.Temp); i++ {

		if err := m.Temp[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temp" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("temp" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AirConRangeMode) validateVol(formats strfmt.Registry) error {
	if swag.IsZero(m.Vol) { // not required
		return nil
	}

	for i := 0; i < len(m.Vol); i++ {

		if err := m.Vol[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vol" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vol" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this air con range mode based on the context it is used
func (m *AirConRangeMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirConRangeMode) contextValidateDir(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dir); i++ {

		if err := m.Dir[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dir" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dir" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AirConRangeMode) contextValidateTemp(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Temp); i++ {

		if err := m.Temp[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temp" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("temp" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AirConRangeMode) contextValidateVol(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vol); i++ {

		if err := m.Vol[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vol" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vol" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AirConRangeMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AirConRangeMode) UnmarshalBinary(b []byte) error {
	var res AirConRangeMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
