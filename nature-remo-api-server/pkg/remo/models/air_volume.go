// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AirVolume Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.
//
// swagger:model AirVolume
type AirVolume string

func NewAirVolume(value AirVolume) *AirVolume {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AirVolume.
func (m AirVolume) Pointer() *AirVolume {
	return &m
}

const (

	// AirVolumeEmpty captures enum value ""
	AirVolumeEmpty AirVolume = ""

	// AirVolumeAuto captures enum value "auto"
	AirVolumeAuto AirVolume = "auto"

	// AirVolumeNr1 captures enum value "1"
	AirVolumeNr1 AirVolume = "1"

	// AirVolumeNr2 captures enum value "2"
	AirVolumeNr2 AirVolume = "2"

	// AirVolumeNr3 captures enum value "3"
	AirVolumeNr3 AirVolume = "3"

	// AirVolumeNr4 captures enum value "4"
	AirVolumeNr4 AirVolume = "4"

	// AirVolumeNr5 captures enum value "5"
	AirVolumeNr5 AirVolume = "5"

	// AirVolumeNr6 captures enum value "6"
	AirVolumeNr6 AirVolume = "6"

	// AirVolumeNr7 captures enum value "7"
	AirVolumeNr7 AirVolume = "7"

	// AirVolumeNr8 captures enum value "8"
	AirVolumeNr8 AirVolume = "8"

	// AirVolumeNr9 captures enum value "9"
	AirVolumeNr9 AirVolume = "9"

	// AirVolumeNr10 captures enum value "10"
	AirVolumeNr10 AirVolume = "10"
)

// for schema
var airVolumeEnum []interface{}

func init() {
	var res []AirVolume
	if err := json.Unmarshal([]byte(`["","auto","1","2","3","4","5","6","7","8","9","10"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airVolumeEnum = append(airVolumeEnum, v)
	}
}

func (m AirVolume) validateAirVolumeEnum(path, location string, value AirVolume) error {
	if err := validate.EnumCase(path, location, value, airVolumeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this air volume
func (m AirVolume) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAirVolumeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this air volume based on context it is used
func (m AirVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
