// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TVState t v state
//
// swagger:model TVState
type TVState struct {

	// input
	// Enum: [t bs cs]
	Input string `json:"input,omitempty"`
}

// Validate validates this t v state
func (m *TVState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tVStateTypeInputPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["t","bs","cs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tVStateTypeInputPropEnum = append(tVStateTypeInputPropEnum, v)
	}
}

const (

	// TVStateInputT captures enum value "t"
	TVStateInputT string = "t"

	// TVStateInputBs captures enum value "bs"
	TVStateInputBs string = "bs"

	// TVStateInputCs captures enum value "cs"
	TVStateInputCs string = "cs"
)

// prop value enum
func (m *TVState) validateInputEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tVStateTypeInputPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TVState) validateInput(formats strfmt.Registry) error {
	if swag.IsZero(m.Input) { // not required
		return nil
	}

	// value enum
	if err := m.validateInputEnum("input", "body", m.Input); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this t v state based on context it is used
func (m *TVState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TVState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TVState) UnmarshalBinary(b []byte) error {
	var res TVState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
