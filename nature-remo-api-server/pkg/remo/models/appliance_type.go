// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ApplianceType Type of the appliance. "AC" (Air conditioner), "TV" and "LIGHT" are 1st class citizen appliance, which is included in our IRDB (InfraRed signals DataBase). The "ApplianceModel" stores meta data about the appliance. We provide AC specific UI. Everything else is "IR". We just learn the signals from the remote and store them, and when users tap the button on the smartphone app, our server sends it through Remo.
//
// swagger:model ApplianceType
type ApplianceType string

func NewApplianceType(value ApplianceType) *ApplianceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ApplianceType.
func (m ApplianceType) Pointer() *ApplianceType {
	return &m
}

const (

	// ApplianceTypeAC captures enum value "AC"
	ApplianceTypeAC ApplianceType = "AC"

	// ApplianceTypeTV captures enum value "TV"
	ApplianceTypeTV ApplianceType = "TV"

	// ApplianceTypeLIGHT captures enum value "LIGHT"
	ApplianceTypeLIGHT ApplianceType = "LIGHT"

	// ApplianceTypeIR captures enum value "IR"
	ApplianceTypeIR ApplianceType = "IR"
)

// for schema
var applianceTypeEnum []interface{}

func init() {
	var res []ApplianceType
	if err := json.Unmarshal([]byte(`["AC","TV","LIGHT","IR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applianceTypeEnum = append(applianceTypeEnum, v)
	}
}

func (m ApplianceType) validateApplianceTypeEnum(path, location string, value ApplianceType) error {
	if err := validate.EnumCase(path, location, value, applianceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this appliance type
func (m ApplianceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateApplianceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this appliance type based on context it is used
func (m ApplianceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
