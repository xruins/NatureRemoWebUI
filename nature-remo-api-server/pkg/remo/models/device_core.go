// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceCore device core
//
// swagger:model DeviceCore
type DeviceCore struct {

	// created at
	// Format: date-time
	CreatedAt DateTime `json:"created_at,omitempty"`

	// firmware version
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// humidity offset
	HumidityOffset float64 `json:"humidity_offset,omitempty"`

	// id
	// Format: uuid
	ID ID `json:"id,omitempty"`

	// mac address
	MacAddress string `json:"mac_address,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// temperature offset
	TemperatureOffset float64 `json:"temperature_offset,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt DateTime `json:"updated_at,omitempty"`
}

// Validate validates this device core
func (m *DeviceCore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCore) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := m.CreatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("created_at")
		}
		return err
	}

	return nil
}

func (m *DeviceCore) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *DeviceCore) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := m.UpdatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updated_at")
		}
		return err
	}

	return nil
}

// ContextValidate validate this device core based on the context it is used
func (m *DeviceCore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCore) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("created_at")
		}
		return err
	}

	return nil
}

func (m *DeviceCore) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *DeviceCore) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updated_at")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceCore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceCore) UnmarshalBinary(b []byte) error {
	var res DeviceCore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
