// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Device device
//
// swagger:model Device
type Device struct {

	// created at
	// Format: date-time
	CreatedAt DateTime `json:"created_at,omitempty"`

	// firmware version
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// humidity offset
	HumidityOffset float64 `json:"humidity_offset,omitempty"`

	// id
	// Format: uuid
	ID ID `json:"id,omitempty"`

	// mac address
	MacAddress string `json:"mac_address,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// newest events
	NewestEvents *DeviceNewestEvents `json:"newest_events,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// temperature offset
	TemperatureOffset float64 `json:"temperature_offset,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt DateTime `json:"updated_at,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewestEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := m.CreatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("created_at")
		}
		return err
	}

	return nil
}

func (m *Device) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Device) validateNewestEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.NewestEvents) { // not required
		return nil
	}

	if m.NewestEvents != nil {
		if err := m.NewestEvents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := m.UpdatedAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updated_at")
		}
		return err
	}

	return nil
}

// ContextValidate validate this device based on the context it is used
func (m *Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewestEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("created_at")
		}
		return err
	}

	return nil
}

func (m *Device) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Device) contextValidateNewestEvents(ctx context.Context, formats strfmt.Registry) error {

	if m.NewestEvents != nil {
		if err := m.NewestEvents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events")
			}
			return err
		}
	}

	return nil
}

func (m *Device) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_at")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updated_at")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceNewestEvents device newest events
// Example: {"hu":{"created_at":"2020-09-10T06:03:58.213Z","val":0},"il":{"created_at":"2020-09-10T06:03:58.213Z","val":0},"mo":{"created_at":"2020-09-10T06:03:58.213Z","val":1},"te":{"created_at":"2020-09-10T06:03:58.213Z","val":0}}
//
// swagger:model DeviceNewestEvents
type DeviceNewestEvents struct {

	// hu
	Hu *SensorValue `json:"hu,omitempty"`

	// il
	Il *SensorValue `json:"il,omitempty"`

	// mo
	Mo *SensorValue `json:"mo,omitempty"`

	// te
	Te *SensorValue `json:"te,omitempty"`
}

// Validate validates this device newest events
func (m *DeviceNewestEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTe(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceNewestEvents) validateHu(formats strfmt.Registry) error {
	if swag.IsZero(m.Hu) { // not required
		return nil
	}

	if m.Hu != nil {
		if err := m.Hu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "hu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "hu")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNewestEvents) validateIl(formats strfmt.Registry) error {
	if swag.IsZero(m.Il) { // not required
		return nil
	}

	if m.Il != nil {
		if err := m.Il.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "il")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "il")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNewestEvents) validateMo(formats strfmt.Registry) error {
	if swag.IsZero(m.Mo) { // not required
		return nil
	}

	if m.Mo != nil {
		if err := m.Mo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "mo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "mo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNewestEvents) validateTe(formats strfmt.Registry) error {
	if swag.IsZero(m.Te) { // not required
		return nil
	}

	if m.Te != nil {
		if err := m.Te.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "te")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "te")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device newest events based on the context it is used
func (m *DeviceNewestEvents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHu(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceNewestEvents) contextValidateHu(ctx context.Context, formats strfmt.Registry) error {

	if m.Hu != nil {
		if err := m.Hu.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "hu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "hu")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNewestEvents) contextValidateIl(ctx context.Context, formats strfmt.Registry) error {

	if m.Il != nil {
		if err := m.Il.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "il")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "il")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNewestEvents) contextValidateMo(ctx context.Context, formats strfmt.Registry) error {

	if m.Mo != nil {
		if err := m.Mo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "mo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "mo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceNewestEvents) contextValidateTe(ctx context.Context, formats strfmt.Registry) error {

	if m.Te != nil {
		if err := m.Te.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newest_events" + "." + "te")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newest_events" + "." + "te")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceNewestEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceNewestEvents) UnmarshalBinary(b []byte) error {
	var res DeviceNewestEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
