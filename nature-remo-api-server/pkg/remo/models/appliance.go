// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Appliance appliance
//
// swagger:model Appliance
type Appliance struct {

	// aircon
	Aircon *AirCon `json:"aircon,omitempty"`

	// device
	Device *DeviceCore `json:"device,omitempty"`

	// id
	// Format: uuid
	ID ID `json:"id,omitempty"`

	// image
	Image Image `json:"image,omitempty"`

	// light
	Light *LIGHT `json:"light,omitempty"`

	// model
	Model *ApplianceModel `json:"model,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`

	// settings
	Settings *AirConParams `json:"settings,omitempty"`

	// signals
	Signals []*Signal `json:"signals"`

	// smart meter
	SmartMeter *SmartMeter `json:"smart_meter,omitempty"`

	// tv
	Tv *TV `json:"tv,omitempty"`

	// type
	Type *ApplianceType `json:"type,omitempty"`
}

// Validate validates this appliance
func (m *Appliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAircon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartMeter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Appliance) validateAircon(formats strfmt.Registry) error {
	if swag.IsZero(m.Aircon) { // not required
		return nil
	}

	if m.Aircon != nil {
		if err := m.Aircon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aircon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aircon")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Appliance) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if err := m.Image.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("image")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("image")
		}
		return err
	}

	return nil
}

func (m *Appliance) validateLight(formats strfmt.Registry) error {
	if swag.IsZero(m.Light) { // not required
		return nil
	}

	if m.Light != nil {
		if err := m.Light.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("light")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("light")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateSignals(formats strfmt.Registry) error {
	if swag.IsZero(m.Signals) { // not required
		return nil
	}

	for i := 0; i < len(m.Signals); i++ {
		if swag.IsZero(m.Signals[i]) { // not required
			continue
		}

		if m.Signals[i] != nil {
			if err := m.Signals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Appliance) validateSmartMeter(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartMeter) { // not required
		return nil
	}

	if m.SmartMeter != nil {
		if err := m.SmartMeter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smart_meter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smart_meter")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateTv(formats strfmt.Registry) error {
	if swag.IsZero(m.Tv) { // not required
		return nil
	}

	if m.Tv != nil {
		if err := m.Tv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tv")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this appliance based on the context it is used
func (m *Appliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAircon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmartMeter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Appliance) contextValidateAircon(ctx context.Context, formats strfmt.Registry) error {

	if m.Aircon != nil {
		if err := m.Aircon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aircon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aircon")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Appliance) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Image.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("image")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("image")
		}
		return err
	}

	return nil
}

func (m *Appliance) contextValidateLight(ctx context.Context, formats strfmt.Registry) error {

	if m.Light != nil {
		if err := m.Light.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("light")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("light")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if m.Model != nil {
		if err := m.Model.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateSignals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Signals); i++ {

		if m.Signals[i] != nil {
			if err := m.Signals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Appliance) contextValidateSmartMeter(ctx context.Context, formats strfmt.Registry) error {

	if m.SmartMeter != nil {
		if err := m.SmartMeter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smart_meter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smart_meter")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateTv(ctx context.Context, formats strfmt.Registry) error {

	if m.Tv != nil {
		if err := m.Tv.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tv")
			}
			return err
		}
	}

	return nil
}

func (m *Appliance) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Appliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Appliance) UnmarshalBinary(b []byte) error {
	var res Appliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
