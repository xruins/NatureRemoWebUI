// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPost1AppliancesParams creates a new Post1AppliancesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPost1AppliancesParams() *Post1AppliancesParams {
	return &Post1AppliancesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPost1AppliancesParamsWithTimeout creates a new Post1AppliancesParams object
// with the ability to set a timeout on a request.
func NewPost1AppliancesParamsWithTimeout(timeout time.Duration) *Post1AppliancesParams {
	return &Post1AppliancesParams{
		timeout: timeout,
	}
}

// NewPost1AppliancesParamsWithContext creates a new Post1AppliancesParams object
// with the ability to set a context for a request.
func NewPost1AppliancesParamsWithContext(ctx context.Context) *Post1AppliancesParams {
	return &Post1AppliancesParams{
		Context: ctx,
	}
}

// NewPost1AppliancesParamsWithHTTPClient creates a new Post1AppliancesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPost1AppliancesParamsWithHTTPClient(client *http.Client) *Post1AppliancesParams {
	return &Post1AppliancesParams{
		HTTPClient: client,
	}
}

/* Post1AppliancesParams contains all the parameters to send to the API endpoint
   for the post1 appliances operation.

   Typically these are written to a http.Request.
*/
type Post1AppliancesParams struct {

	/* Device.

	   Device ID
	*/
	Device string

	/* Image.

	   Basename of the image file included in the app. Ex: "ico_ac_1"

	*/
	Image string

	/* Model.

	   ApplianceModel ID if the appliance we're trying to create is included in IRDB.
	*/
	Model *string

	// ModelType.
	ModelType *string

	/* Nickname.

	   Appliance name
	*/
	Nickname string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post1 appliances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Post1AppliancesParams) WithDefaults() *Post1AppliancesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post1 appliances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Post1AppliancesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post1 appliances params
func (o *Post1AppliancesParams) WithTimeout(timeout time.Duration) *Post1AppliancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post1 appliances params
func (o *Post1AppliancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post1 appliances params
func (o *Post1AppliancesParams) WithContext(ctx context.Context) *Post1AppliancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post1 appliances params
func (o *Post1AppliancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post1 appliances params
func (o *Post1AppliancesParams) WithHTTPClient(client *http.Client) *Post1AppliancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post1 appliances params
func (o *Post1AppliancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the post1 appliances params
func (o *Post1AppliancesParams) WithDevice(device string) *Post1AppliancesParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post1 appliances params
func (o *Post1AppliancesParams) SetDevice(device string) {
	o.Device = device
}

// WithImage adds the image to the post1 appliances params
func (o *Post1AppliancesParams) WithImage(image string) *Post1AppliancesParams {
	o.SetImage(image)
	return o
}

// SetImage adds the image to the post1 appliances params
func (o *Post1AppliancesParams) SetImage(image string) {
	o.Image = image
}

// WithModel adds the model to the post1 appliances params
func (o *Post1AppliancesParams) WithModel(model *string) *Post1AppliancesParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the post1 appliances params
func (o *Post1AppliancesParams) SetModel(model *string) {
	o.Model = model
}

// WithModelType adds the modelType to the post1 appliances params
func (o *Post1AppliancesParams) WithModelType(modelType *string) *Post1AppliancesParams {
	o.SetModelType(modelType)
	return o
}

// SetModelType adds the modelType to the post1 appliances params
func (o *Post1AppliancesParams) SetModelType(modelType *string) {
	o.ModelType = modelType
}

// WithNickname adds the nickname to the post1 appliances params
func (o *Post1AppliancesParams) WithNickname(nickname string) *Post1AppliancesParams {
	o.SetNickname(nickname)
	return o
}

// SetNickname adds the nickname to the post1 appliances params
func (o *Post1AppliancesParams) SetNickname(nickname string) {
	o.Nickname = nickname
}

// WriteToRequest writes these params to a swagger request
func (o *Post1AppliancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param device
	frDevice := o.Device
	fDevice := frDevice
	if fDevice != "" {
		if err := r.SetFormParam("device", fDevice); err != nil {
			return err
		}
	}

	// form param image
	frImage := o.Image
	fImage := frImage
	if fImage != "" {
		if err := r.SetFormParam("image", fImage); err != nil {
			return err
		}
	}

	if o.Model != nil {

		// form param model
		var frModel string
		if o.Model != nil {
			frModel = *o.Model
		}
		fModel := frModel
		if fModel != "" {
			if err := r.SetFormParam("model", fModel); err != nil {
				return err
			}
		}
	}

	if o.ModelType != nil {

		// form param model_type
		var frModelType string
		if o.ModelType != nil {
			frModelType = *o.ModelType
		}
		fModelType := frModelType
		if fModelType != "" {
			if err := r.SetFormParam("model_type", fModelType); err != nil {
				return err
			}
		}
	}

	// form param nickname
	frNickname := o.Nickname
	fNickname := frNickname
	if fNickname != "" {
		if err := r.SetFormParam("nickname", fNickname); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
